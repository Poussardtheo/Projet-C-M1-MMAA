#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

# Fonction 1
double coefficient_directeur(std::vector<int> A, std::vector<int> B)
{
    double coef_dir;
    coef_dir = (B[1]-A[1])/(B[0]-A[0]); // Calcul du coefficient directeur

    return coef_dir;
}

# Fonction 2

std::vector<int> ordonne_origine(double coeff_dir, std::vector<int> A)
{
    std::vector<int> ordon_orig(2,0);
    ordon_orig[1] = 0;
    ordon_orig[0] = A[0]-coeff_dir*A[1];

    return ordon_orig;
}

# Fonction 3

std::vector<std::vector<int>> Tf_Hough_a_couple_donnee(double coef_dir, std::vector<int> ordon_orig, std::vector<int> dim_image)
{
    std::vector<std::vector<int>> Matrice_Hough;

    for (int i = 0; i < dim_image[0]; i++) //Initialisation matrice de Hough
    {
        std::vector<int> ligne;
        for (int j = 0; j < dim_image[1]; j++)
        {
            ligne.push_back(0);
        }
        Matrice_Hough.push_back(ligne);
    }

    for(int i = 0; i < dim_image[0]; i++) // 
    {
        double valeur_abscisse = (i-ordon_orig[0])/coef_dir; // On détermine l'abscisse à ordonné fixée
        int partie_entiere_inf = int(floor(valeur_abscisse)); // On prend la partie entière inférieure

        if (valeur_abscisse < 0 || valeur_abscisse > dim_image[1]) 
        {
            continue; // passe à l'itération suivante
        }else{
            if (valeur_abscisse > partie_entiere_inf + 0.5) // Nous informe à quel colonne on met un 1 (pixel à gauche ou à droite du segment)
            {
                Matrice_Hough[i][partie_entiere_inf+1] = 1; 
            }else{
                Matrice_Hough[i][partie_entiere_inf] = 1;
            }
        }

    }
    
    return Matrice_Hough;
}
